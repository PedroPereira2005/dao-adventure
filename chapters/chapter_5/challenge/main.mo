import Result "mo:base/Result";
import HashMap "mo:base/HashMap";
import TrieMap "mo:base/TrieMap";
import Principal "mo:base/Principal";
import Text "mo:base/Text";
import Buffer "mo:base/Buffer";
import Nat64 "mo:base/Nat64";
import Iter "mo:base/Iter";
import Blob "mo:base/Blob";
import Debug "mo:base/Debug";
import Option "mo:base/Option";
import Time "mo:base/Time";
import Array "mo:base/Array";
import Types "types";
actor {
    // For this level we need to make use of the code implemented in the previous projects.
    // The voting system will make use of previous data structures and functions.

    /////////////////
    //   TYPES    //
    ///////////////
    type Member = Types.Member;
    type Result<Ok, Err> = Types.Result<Ok, Err>;
    type HashMap<K, V> = Types.HashMap<K, V>;
    type Proposal = Types.Proposal;
    type ProposalContent = Types.ProposalContent;
    type ProposalId = Types.ProposalId;
    type Vote = Types.Vote;
    type DAOStats = Types.DAOStats;
    type HttpRequest = Types.HttpRequest;
    type HttpResponse = Types.HttpResponse;

    /////////////////
    // PROJECT #1 //
    ///////////////
    let goals = Buffer.Buffer<Text>(0);
    let name = "DarkRose";
    var manifesto = "I aim to build a community of game developers that can share their vision of the world and raise awereness about what they think it's important through video games.";

    public shared query func getName() : async Text {
        return name;
    };

    public shared query func getManifesto() : async Text {
        return manifesto;
    };

    public func setManifesto(newManifesto : Text) : async () {
        manifesto := newManifesto;
        return;
    };

    public func addGoal(newGoal : Text) : async () {
        goals.add(newGoal);
        return;
    };

    public shared query func getGoals() : async [Text] {
        Buffer.toArray(goals);
    };

    /////////////////
    // PROJECT #2 //
    ///////////////
    let members = HashMap.HashMap<Principal, Member>(0, Principal.equal, Principal.hash);

    public shared ({ caller }) func addMember(member : Member) : async Result<(), Text> {
        switch (members.get(caller)) {
            case (null) {
                members.put(caller, member);
                return #ok();
            };
            case (?member) {
                return #err("Member already exists");
            };
        };
    };

    public shared ({ caller }) func updateMember(member : Member) : async Result<(), Text> {
        switch (members.get(caller)) {
            case (null) {
                return #err("Member does not exist");
            };
            case (?member) {
                members.put(caller, member);
                return #ok();
            };
        };
    };

    public shared ({ caller }) func removeMember() : async Result<(), Text> {
        switch (members.get(caller)) {
            case (null) {
                return #err("Member does not exist");
            };
            case (?member) {
                members.delete(caller);
                return #ok();
            };
        };
    };

    public query func getMember(p : Principal) : async Result<Member, Text> {
        switch (members.get(p)) {
            case (null) {
                return #err("Member does not exist");
            };
            case (?member) {
                return #ok(member);
            };
        };
    };

    public query func getAllMembers() : async [Member] {
        return Iter.toArray(members.vals());
    };

    public query func numberOfMembers() : async Nat {
        return members.size();
    };

    /////////////////
    // PROJECT #3 //
    ///////////////
    let ledger = HashMap.HashMap<Principal, Nat>(0, Principal.equal, Principal.hash);

    public query func tokenName() : async Text {
        return "DarkPetal";
    };

    public query func tokenSymbol() : async Text {
        return "@DP";
    };

    public func mint(owner : Principal, amount : Nat) : async Result<(), Text> {
        let balance = Option.get(ledger.get(owner), 0);
        ledger.put(owner, balance + amount);
        return #ok();
    };

    public func burn(owner : Principal, amount : Nat) : async Result<(), Text> {
        let balance = Option.get(ledger.get(owner), 0);
        if (balance < amount) {
            return #err("Insufficient balance to burn");
        };
        ledger.put(owner, balance - amount);
        return #ok();
    };

    func _burn(owner : Principal, amount : Nat) : () {
        let balance = Option.get(ledger.get(owner), 0);
        ledger.put(owner, balance - amount);
        return;
    };

    public shared ({ caller }) func transfer(from : Principal, to : Principal, amount : Nat) : async Result<(), Text> {
        let balanceFrom = Option.get(ledger.get(from), 0);
        let balanceTo = Option.get(ledger.get(to), 0);
        if (balanceFrom < amount) {
            return #err("Insufficient balance to transfer");
        };
        ledger.put(from, balanceFrom - amount);
        ledger.put(to, balanceTo + amount);
        return #ok();
    };

    public query func balanceOf(owner : Principal) : async Nat {
        return (Option.get(ledger.get(owner), 0));
    };

    public query func totalSupply() : async Nat {
        var total = 0;
        for (balance in ledger.vals()) {
            total += balance;
        };
        return total;
    };
    /////////////////
    // PROJECT #4 //
    ///////////////
    var nextProposalId : Nat64 = 0;
    let proposals = HashMap.HashMap<ProposalId, Proposal>(0, Nat64.equal, Nat64.toNat32);

    public shared ({ caller }) func createProposal(content : ProposalContent) : async Result<ProposalId, Text> {
        switch (members.get(caller)) {
            case (null) {
                return #err("The caller is not a member - cannot create a proposal");
            };
            case (?member) {
                let balance = Option.get(ledger.get(caller), 0);
                if (balance < 1) {
                    return #err("The caller does not have enough tokens to create a proposal");
                };
                // Create the proposal and burn the tokens
                let proposal : Proposal = {
                    id = nextProposalId;
                    content;
                    creator = caller;
                    created = Time.now();
                    executed = null;
                    votes = [];
                    voteScore = 0;
                    status = #Open;
                };
                proposals.put(nextProposalId, proposal);
                nextProposalId += 1;
                _burn(caller, 1);
                return #ok(nextProposalId - 1);
            };
        };
    };

    public query func getProposal(proposalId : ProposalId) : async ?Proposal {
        return proposals.get(proposalId);
    };

    public shared ({ caller }) func voteProposal(proposalId : ProposalId, vote : Vote) : async Result<(), Text> {
        // Check if the caller is a member of the DAO
        switch (members.get(caller)) {
            case (null) {
                return #err("The caller is not a member - canno vote one proposal");
            };
            case (?member) {
                // Check if the proposal exists
                switch (proposals.get(proposalId)) {
                    case (null) {
                        return #err("The proposal does not exist");
                    };
                    case (?proposal) {
                        // Check if the proposal is open for voting
                        if (proposal.status != #Open) {
                            return #err("The proposal is not open for voting");
                        };
                        // Check if the caller has already voted
                        if (_hasVoted(proposal, caller)) {
                            return #err("The caller has already voted on this proposal");
                        };
                        let balance = Option.get(ledger.get(caller), 0);
                        let multiplierVote = switch (vote.yesOrNo) {
                            case (true) { 1 };
                            case (false) { -1 };
                        };
                        let newVoteScore = proposal.voteScore + balance * multiplierVote;
                        var newExecuted : ?Time.Time = null;
                        let newVotes = Buffer.fromArray<Vote>(proposal.votes);
                        newVotes.add(vote);
                        let newStatus = if (newVoteScore >= 100) {
                            #Accepted;
                        } else if (newVoteScore <= -100) {
                            #Rejected;
                        } else {
                            #Open;
                        };
                        switch (newStatus) {
                            case (#Accepted) {
                                _executeProposal(proposal.content);
                                newExecuted := ?Time.now();
                            };
                            case (_) {};
                        };
                        let newProposal : Proposal = {
                            id = proposal.id;
                            content = proposal.content;
                            creator = proposal.creator;
                            created = proposal.created;
                            executed = newExecuted;
                            votes = Buffer.toArray(newVotes);
                            voteScore = newVoteScore;
                            status = newStatus;
                        };
                        proposals.put(proposal.id, newProposal);
                        return #ok();
                    };
                };
            };
        };
    };

    func _hasVoted(proposal : Proposal, member : Principal) : Bool {
        return Array.find<Vote>(
            proposal.votes,
            func(vote : Vote) {
                return vote.member == member;
            },
        ) != null;
    };

    func _executeProposal(content : ProposalContent) : () {
        switch (content) {
            case (#ChangeManifesto(newManifesto)) {
                manifesto := newManifesto;
            };
            case (#AddGoal(newGoal)) {
                goals.add(newGoal);
            };
        };
        return;
    };

    public query func getAllProposals() : async [Proposal] {
        return Iter.toArray(proposals.vals());
    };

    /////////////////
    // PROJECT #5 //
    ///////////////
    let logo : Text = "<?xml version='1.0' standalone='no'?>
<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 20010904//EN'
 'http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd'>
<svg version='1.0' xmlns='http://www.w3.org/2000/svg'
 width='300.000000pt' height='300.000000pt' viewBox='0 0 300.000000 300.000000'
 preserveAspectRatio='xMidYMid meet'>
<metadata>
Created by potrace 1.10, written by Peter Selinger 2001-2011
</metadata>
<g transform='translate(0.000000,300.000000) scale(0.100000,-0.100000)'
fill='#000000' stroke='none'>
<path d='M1433 2667 c-11 -7 -47 -26 -80 -44 -33 -17 -86 -54 -119 -82 -38
-33 -64 -49 -74 -45 -43 19 -71 15 -117 -14 -27 -17 -85 -40 -133 -52 -47 -11
-96 -25 -110 -31 -14 -6 -49 -15 -79 -20 -68 -11 -78 -20 -87 -76 -5 -33 -25
-73 -72 -142 -87 -128 -87 -154 -2 -288 13 -19 9 -26 -40 -85 -30 -34 -98
-109 -152 -165 -130 -137 -138 -173 -51 -228 31 -19 65 -55 95 -99 27 -38 48
-73 48 -76 0 -4 -19 -15 -42 -26 -60 -26 -125 -89 -156 -149 -22 -43 -27 -67
-33 -180 -4 -71 -8 -139 -10 -150 -6 -29 36 -32 71 -6 38 28 95 39 221 44
l106 5 -13 -39 c-32 -93 -22 -228 22 -297 19 -28 36 -28 82 3 21 14 78 34 128
45 146 33 158 36 199 56 22 10 64 42 94 71 54 52 55 53 75 34 12 -10 53 -35
92 -54 40 -20 93 -54 119 -77 50 -43 69 -48 95 -25 9 8 52 18 98 24 51 5 95
17 117 30 20 11 44 21 53 21 9 0 49 18 88 38 l72 38 18 -34 c24 -45 115 -127
174 -157 26 -13 85 -33 130 -45 46 -12 102 -32 125 -46 35 -20 44 -22 59 -11
30 22 91 278 83 347 l-5 36 64 12 c76 14 110 15 132 3 16 -8 17 3 17 137 -1
144 -1 148 -30 202 -17 30 -54 79 -83 108 -53 52 -54 53 -37 78 9 14 26 29 38
35 13 6 32 24 42 40 11 16 44 48 73 70 55 42 64 67 38 104 -7 11 -28 72 -46
135 -48 172 -87 248 -155 299 -30 23 -55 46 -55 52 0 13 -62 39 -94 39 -27 0
-39 21 -31 53 12 47 10 189 -2 206 -6 10 -54 36 -106 59 -91 40 -100 42 -196
42 -100 0 -100 0 -115 29 -13 24 -93 71 -123 71 -5 0 -24 13 -43 28 -50 41
-70 50 -150 67 -44 9 -88 27 -115 45 -61 42 -88 51 -112 37z m97 -81 c36 -19
94 -44 130 -57 36 -13 91 -40 123 -61 32 -20 75 -42 95 -49 20 -6 43 -19 50
-28 7 -9 16 -15 20 -13 3 2 8 -1 10 -6 4 -12 -35 -4 -63 14 -11 6 -36 15 -56
18 -20 3 -53 21 -75 39 -39 33 -93 61 -101 54 -2 -3 16 -14 39 -25 24 -11 52
-30 63 -43 19 -22 10 -20 -26 5 -8 6 -3 -1 12 -16 15 -14 24 -30 21 -34 -4 -4
-2 -4 5 0 7 4 25 3 40 -1 26 -7 25 -8 -22 -18 -42 -10 -52 -9 -63 4 -8 9 -10
10 -7 3 7 -14 -21 -41 -42 -42 -7 0 -13 9 -13 21 0 16 4 19 23 14 17 -5 16 -2
-8 14 -16 11 -41 28 -55 38 -23 17 -24 17 -11 0 18 -23 9 -22 -49 8 -61 31
-85 31 -185 0 -91 -29 -108 -30 -81 -10 21 16 15 18 -21 9 -13 -4 -20 -10 -17
-15 3 -5 -9 -9 -26 -9 -19 0 -29 4 -25 10 4 6 10 8 13 6 4 -2 19 4 32 15 18
14 20 17 6 12 -13 -4 -17 -3 -12 5 12 19 -5 14 -40 -13 -38 -29 -47 -30 -64
-10 -13 15 -35 21 -26 7 2 -4 -12 -18 -31 -31 -19 -12 -32 -17 -27 -10 5 8 3
10 -7 6 -8 -3 -60 -24 -116 -46 -118 -46 -199 -86 -209 -102 -10 -17 37 -1 61
21 11 10 31 21 44 25 28 9 -54 -68 -120 -112 -28 -19 -38 -31 -33 -42 18 -45
26 -89 21 -125 -3 -22 -2 -34 2 -27 5 8 11 -5 16 -35 4 -27 11 -56 16 -65 7
-14 2 -18 -29 -24 -41 -8 -42 -8 -41 1 0 4 -3 10 -8 13 -5 3 -17 17 -26 31 -9
13 -17 20 -17 14 0 -5 7 -20 16 -33 16 -22 15 -24 -6 -44 -13 -12 -20 -17 -17
-11 3 5 -5 41 -19 80 -13 38 -26 88 -28 111 -5 43 0 54 83 168 21 30 36 63 39
91 l4 43 57 11 c110 22 266 62 296 77 17 9 40 25 53 36 l22 21 28 -20 27 -20
50 38 c28 22 87 57 133 79 46 22 86 47 89 55 7 19 10 19 83 -20z m60 -194 c46
-17 56 -25 58 -47 2 -15 -1 -32 -7 -38 -8 -8 -11 -5 -11 11 0 36 -19 25 -40
-22 -10 -24 -22 -46 -27 -49 -14 -9 -93 5 -87 15 3 5 -5 7 -18 4 -68 -14 -102
-17 -93 -8 6 6 26 15 45 20 33 10 33 10 7 11 -35 1 -125 -29 -202 -68 -56 -29
-64 -42 -13 -22 47 19 63 24 71 23 4 -1 7 3 7 9 0 5 5 7 10 4 6 -3 10 -1 10 5
0 6 5 8 10 5 6 -3 10 -1 10 4 0 6 8 11 18 11 12 0 7 -7 -15 -21 -18 -11 -38
-22 -45 -23 -11 -3 -48 -20 -208 -94 -25 -12 -18 -12 40 2 l25 7 -23 -17 c-13
-10 -59 -32 -104 -50 -107 -43 -119 -58 -19 -24 45 16 83 25 85 21 9 -13 -10
-30 -54 -50 -34 -15 -38 -19 -15 -14 17 3 39 12 50 19 27 19 29 19 54 -27 25
-45 27 -36 -25 -144 -13 -27 -25 -61 -26 -75 -4 -36 -28 -31 -54 10 -37 58
-72 97 -88 97 -11 0 -6 -10 14 -34 16 -18 36 -46 44 -62 20 -37 154 -162 241
-223 97 -68 316 -182 400 -208 97 -30 119 -38 203 -77 40 -18 78 -33 85 -32 6
0 -3 7 -20 15 -39 17 -41 26 -10 47 12 8 42 33 67 56 25 22 90 65 145 95 105
57 132 80 159 134 17 32 16 32 -3 20 -11 -6 -18 -15 -15 -19 6 -10 -43 -67
-70 -81 -20 -10 -20 -10 2 15 15 15 20 27 13 31 -6 4 -19 -7 -29 -23 -10 -17
-22 -28 -27 -23 -5 4 -5 2 -1 -5 4 -7 -2 -17 -13 -22 -23 -13 -53 -15 -34 -3
7 4 18 25 25 47 11 34 22 45 72 71 32 17 66 43 75 58 14 24 14 29 -1 58 -9 18
-16 53 -16 77 1 42 1 43 14 20 7 -13 13 -19 14 -12 0 7 -16 28 -35 47 -37 37
-43 48 -22 42 6 -3 26 -7 42 -11 26 -6 27 -8 11 -14 -19 -7 -19 -8 2 -13 12
-4 20 -2 16 3 -10 17 10 9 35 -13 l25 -23 -15 25 c-9 14 -44 39 -77 55 -89 44
-97 55 -40 55 57 0 96 -30 138 -104 16 -28 52 -78 80 -111 27 -32 50 -63 50
-67 0 -6 31 -75 58 -132 3 -4 -18 -5 -45 -1 -48 6 -51 5 -76 -27 -49 -62 -57
-68 -90 -68 -46 0 -55 -10 -59 -60 l-3 -45 -105 -53 c-82 -42 -113 -52 -142
-50 -48 4 -49 -9 -2 -18 43 -8 101 8 151 41 20 14 41 25 48 25 7 0 24 9 39 21
15 12 34 18 43 15 13 -5 14 -4 4 8 -17 20 -10 66 11 80 20 12 67 -17 83 -52 5
-12 13 -22 17 -22 13 0 -4 34 -30 63 l-26 27 30 12 c18 6 39 26 50 47 17 31
24 35 63 37 55 3 67 15 48 45 -16 27 -40 116 -33 127 2 4 -9 25 -26 47 -17 22
-28 32 -25 23 4 -10 2 -18 -2 -18 -13 0 -58 56 -66 80 -3 11 -11 20 -16 20 -6
0 -8 10 -4 23 4 12 3 17 -2 10 -4 -6 -9 21 -10 62 0 45 -7 84 -18 105 -9 17
-14 39 -10 48 8 22 -6 133 -16 126 -5 -3 -9 -18 -9 -33 0 -15 -6 -33 -12 -40
-11 -10 -9 -11 7 -5 18 7 18 6 6 -9 -7 -9 -21 -17 -30 -18 -9 -1 -7 -4 7 -7
13 -4 23 -10 22 -15 0 -4 7 -21 15 -38 9 -17 18 -49 21 -72 3 -23 7 -50 10
-59 6 -21 -12 -24 -23 -4 -4 8 -25 24 -46 36 -30 18 -48 22 -86 17 -46 -5 -48
-5 -66 30 -42 77 -155 142 -262 151 -66 5 -77 21 -15 23 26 1 30 3 13 6 -33 6
-93 -6 -86 -18 4 -5 -5 -9 -19 -9 -14 0 -26 -4 -26 -10 0 -5 24 -10 53 -10
104 0 234 -49 297 -111 17 -18 43 -57 56 -88 14 -31 35 -66 47 -79 14 -15 24
-43 29 -80 4 -31 10 -71 13 -88 6 -27 3 -34 -23 -53 -16 -11 -53 -26 -82 -32
-35 -7 -65 -22 -89 -45 -46 -41 -73 -52 -156 -60 -45 -5 -75 -14 -97 -30 -39
-29 -57 -30 -108 -4 -22 11 -56 24 -77 28 -20 4 -38 13 -41 20 -3 9 4 11 25 6
16 -4 25 -3 20 2 -9 9 -13 10 -41 13 -8 0 -25 15 -37 32 l-22 31 24 -13 c13
-7 38 -14 54 -15 20 -2 11 4 -28 18 -64 22 -74 35 -111 149 l-22 69 43 75 c55
94 52 118 -5 37 -23 -32 -39 -62 -36 -64 2 -3 -3 -11 -13 -19 -9 -8 -14 -9
-10 -2 4 6 3 15 -3 18 -6 4 -10 22 -8 40 1 19 5 32 9 30 3 -3 11 7 18 21 13
30 14 45 1 24 -6 -10 -10 -11 -10 -2 0 7 -9 3 -21 -9 -20 -20 -21 -26 -11 -84
14 -85 80 -250 133 -332 39 -60 69 -115 69 -128 0 -17 -38 17 -69 64 -22 31
-82 105 -135 165 -82 95 -102 125 -145 222 -27 61 -61 128 -75 149 -14 21 -26
44 -26 51 0 25 164 137 239 163 47 15 128 14 188 -4 62 -19 144 -72 154 -102
7 -20 5 -20 -34 7 -43 28 -106 51 -142 49 -11 0 2 -7 29 -14 58 -16 88 -39 38
-29 -19 4 -32 2 -32 -4 0 -5 9 -8 20 -5 12 3 20 0 20 -7 0 -9 -11 -11 -35 -7
-21 3 -33 2 -30 -4 4 -5 1 -9 -6 -9 -7 0 -20 -7 -29 -15 -15 -14 -15 -21 -4
-63 6 -26 17 -59 23 -74 6 -15 8 -34 5 -41 -3 -8 5 -19 18 -26 l23 -12 -23 5
c-12 2 -19 0 -16 -5 6 -10 63 -8 70 2 2 4 -9 10 -26 14 -29 6 -52 25 -31 25 7
0 7 9 0 28 -14 42 -16 134 -2 139 8 3 13 -14 15 -53 l3 -58 58 -33 c54 -30 70
-28 47 7 -7 11 -10 11 -10 2 0 -7 -4 -11 -10 -7 -12 7 6 52 32 80 19 20 19 20
44 -8 24 -28 33 -67 14 -67 -5 0 -10 7 -10 16 0 15 -39 58 -46 51 -1 -1 6 -27
16 -57 14 -40 20 -50 25 -37 8 20 31 23 38 5 3 -7 3 14 2 46 -3 50 -7 62 -27
72 -24 14 -111 19 -93 6 17 -11 11 -37 -7 -36 -14 1 -15 -2 -8 -16 14 -25 13
-30 -6 -30 -8 0 -12 5 -9 11 4 6 -2 13 -14 16 -14 3 -23 16 -27 39 -9 47 0 62
39 69 50 10 113 -11 158 -52 39 -36 74 -83 50 -68 -8 5 -10 -1 -6 -18 5 -19 2
-25 -14 -30 -13 -3 -19 -11 -16 -19 6 -15 -2 -18 -59 -21 -19 -1 -32 -5 -29
-9 2 -5 -5 -8 -17 -8 -21 0 -150 -55 -150 -64 0 -3 21 4 46 16 26 11 83 23
130 28 111 10 134 27 134 101 0 35 -7 56 -30 87 -39 54 -38 59 7 25 41 -31 83
-112 83 -159 0 -44 -29 -76 -109 -118 -38 -20 -72 -36 -75 -36 -3 0 -6 14 -6
32 0 23 -3 29 -11 21 -6 -6 -8 -25 -4 -47 l7 -36 86 45 c47 24 88 43 90 41 9
-9 -19 -81 -40 -104 -22 -23 -22 -24 -2 -14 11 6 27 18 34 27 11 14 15 10 32
-27 23 -51 22 -52 -91 -99 -128 -52 -111 -68 19 -17 110 43 179 104 185 164
l4 39 -21 -43 c-18 -38 -63 -82 -72 -71 -1 2 -10 24 -19 49 -19 51 -22 106 -7
115 18 11 32 85 21 116 -7 21 -7 29 2 30 9 0 9 2 0 6 -7 2 -13 12 -13 20 0 12
9 9 38 -12 l37 -28 -26 27 c-23 24 -40 32 -73 35 -5 1 -3 7 3 15 9 11 5 16
-21 26 -18 7 -28 14 -21 17 6 2 27 -3 47 -11 20 -8 34 -11 31 -6 -9 15 -114
50 -151 50 -28 0 -36 5 -45 26 -5 15 -12 24 -16 20 -10 -9 -35 33 -27 46 4 7
3 8 -4 4 -11 -6 -92 29 -92 40 0 13 28 32 36 24 5 -5 31 5 60 25 78 53 155 69
262 56 48 -6 127 -11 175 -11 76 0 98 -4 159 -30 38 -16 77 -30 85 -30 11 0
13 -5 7 -17 -15 -33 -14 -204 2 -234 8 -16 14 -50 14 -76 l1 -48 14 32 c10 23
19 31 29 27 9 -3 16 -10 16 -16 0 -5 4 -6 10 -3 6 3 10 0 10 -8 0 -8 9 -22 20
-32 11 -10 34 -43 51 -72 32 -56 50 -73 24 -23 -28 54 -7 31 24 -26 17 -31 28
-61 24 -67 -3 -5 -2 -7 4 -4 6 4 18 -12 28 -34 20 -43 41 -65 26 -27 -5 13
-31 68 -59 123 -40 77 -63 110 -104 146 -29 25 -63 49 -76 53 -12 4 -20 12
-17 17 4 5 1 9 -6 9 -7 0 -9 3 -6 6 13 13 74 -27 142 -93 70 -67 72 -70 129
-218 31 -82 64 -165 72 -183 18 -43 19 -40 -21 -48 -33 -6 -59 -24 -36 -24 17
0 -49 -91 -73 -100 -11 -4 -39 -27 -61 -49 -25 -26 -54 -45 -80 -52 -22 -6
-48 -13 -59 -16 -11 -3 -17 -1 -14 7 2 6 27 20 56 29 36 12 73 37 116 77 63
58 94 110 38 62 -15 -12 -27 -26 -27 -30 0 -10 -67 -78 -78 -78 -4 0 -5 5 -1
12 4 6 -8 2 -28 -10 -51 -32 -71 -29 -66 8 3 16 2 30 -1 30 -7 0 -35 -99 -50
-177 -9 -46 -111 -246 -132 -259 -8 -5 -10 3 -13 49 -1 10 -14 26 -31 35 -16
9 -32 20 -35 23 -10 11 -39 18 -44 11 -3 -5 10 -16 28 -26 56 -30 94 -123 68
-164 -7 -9 -16 -10 -41 -1 -54 19 -162 5 -241 -32 -88 -40 -143 -38 -220 10
-52 32 -74 36 -46 8 18 -17 11 -28 -12 -20 -20 6 7 -14 53 -42 l30 -17 -25 21
c-31 26 -28 26 38 1 70 -27 96 -25 171 10 35 17 66 29 68 26 3 -2 0 -21 -6
-42 -11 -38 -7 -47 39 -94 3 -3 6 -11 8 -18 4 -23 -17 -12 -34 17 -9 16 -22
28 -28 27 -6 -2 -8 -1 -3 1 4 3 7 9 7 14 0 12 -132 -54 -149 -75 -21 -25 -31
-19 -31 20 0 41 -15 38 -25 -5 -9 -43 -23 -50 -120 -66 -47 -7 -97 -20 -109
-28 -20 -14 -24 -12 -55 25 -22 26 -60 52 -116 79 -107 50 -165 115 -119 133
22 8 23 8 17 -12 -7 -30 28 -61 107 -93 41 -16 83 -37 92 -46 24 -22 23 -8 -3
29 -15 20 -24 26 -29 18 -9 -15 -82 20 -122 58 -21 19 -25 29 -17 43 5 10 16
16 24 13 8 -4 12 -11 9 -16 -4 -6 1 -6 13 0 11 6 54 12 96 13 42 1 77 5 77 8
0 3 15 12 33 20 17 7 45 20 61 27 40 19 48 18 119 -18 74 -37 123 -39 187 -9
43 20 43 21 10 14 -19 -5 -55 -7 -80 -7 -57 1 -170 34 -170 50 0 7 13 23 29
36 16 14 32 34 35 46 7 20 8 20 37 -11 32 -33 30 -24 -7 30 -12 18 -24 30 -26
27 -12 -11 -40 76 -33 105 6 28 10 31 46 31 44 0 47 -4 22 -34 -17 -20 -17
-20 1 -6 10 8 31 20 45 27 15 6 20 12 11 13 -12 1 -12 3 2 8 9 4 -28 8 -82 8
-93 2 -98 1 -87 -17 8 -12 15 -15 23 -8 9 7 10 -1 7 -33 -2 -24 2 -64 10 -90
l15 -47 -43 -40 c-24 -22 -74 -54 -111 -71 -61 -27 -76 -30 -173 -30 -82 0
-115 -5 -147 -19 -40 -18 -42 -18 -81 0 -36 16 -46 17 -121 5 -46 -7 -84 -11
-86 -7 -2 3 -7 20 -11 38 -10 47 -40 80 -96 104 -33 15 -51 29 -53 43 -29 152
-55 237 -76 244 -7 3 -10 0 -6 -7 9 -14 3 -14 -29 1 -14 6 -24 17 -21 23 3 8
-4 10 -20 7 -15 -3 -33 3 -45 14 -22 20 -54 74 -51 85 1 4 -10 19 -23 33 -27
29 -58 36 -48 10 3 -8 11 -13 19 -10 13 5 37 -17 40 -39 5 -34 62 -98 120
-134 77 -48 85 -72 12 -35 -53 27 -101 74 -200 194 -30 36 -68 74 -86 85 -17
11 -31 24 -32 28 0 18 72 95 101 107 28 12 83 10 124 -5 19 -8 19 -7 2 11 -14
15 -31 19 -77 18 l-59 -1 60 73 c67 80 143 143 203 168 54 22 66 20 66 -11 0
-39 35 -105 81 -152 53 -54 70 -53 26 2 -53 65 -70 105 -78 192 -12 120 -37
246 -54 272 -9 13 -11 23 -6 23 6 0 54 30 108 67 109 74 178 108 241 118 37 6
47 3 80 -21 l37 -29 -18 28 c-34 53 -23 61 78 59 63 -2 112 3 165 17 85 22
112 21 190 -7z m-400 -533 c17 -33 30 -65 28 -71 -2 -6 -12 8 -22 31 -11 22
-23 41 -28 41 -21 0 61 -128 131 -204 117 -127 162 -188 149 -202 -8 -8 -125
56 -156 86 -15 13 -31 23 -35 22 -5 -1 -7 1 -4 5 2 5 -17 26 -42 48 -24 22
-41 33 -37 25 4 -8 -9 3 -29 24 -19 22 -39 54 -44 70 l-9 31 -1 -34 c-1 -29
-3 -32 -16 -21 -16 14 -15 23 13 99 13 36 17 40 23 25 6 -15 8 -12 8 13 1 40
18 86 30 79 5 -3 23 -33 41 -67z m875 -349 c-14 -27 -30 -50 -36 -50 -6 0 -5
8 2 23 7 12 -36 -29 -95 -91 -94 -98 -126 -122 -126 -94 0 4 12 16 28 26 16
10 19 15 7 10 -11 -4 -33 -8 -50 -10 -25 -4 -27 -3 -10 5 17 8 13 10 -20 12
l-40 2 35 7 35 7 -37 2 c-24 1 -38 -4 -38 -11 0 -9 -3 -9 -8 -3 -4 6 -18 11
-32 11 -35 1 -61 8 -86 22 -12 6 -24 8 -28 4 -4 -3 -3 5 1 18 5 14 8 37 7 53
0 15 3 27 8 27 10 0 73 -33 100 -52 12 -9 29 -9 73 2 42 10 52 16 39 21 -12 4
3 8 39 10 31 2 57 0 57 -4 0 -5 5 -5 10 -2 6 4 8 10 5 15 -5 9 7 14 61 25 17
3 46 19 65 35 52 45 63 38 34 -20z m465 -285 c-10 -12 -9 -16 4 -21 9 -3 16
-10 16 -15 0 -5 -11 -2 -25 7 -24 16 -25 18 -9 35 20 22 33 17 14 -6z m-15
-44 c56 -25 160 -144 110 -125 -8 4 -15 2 -15 -3 0 -5 13 -14 29 -20 25 -9 30
-18 35 -54 10 -78 13 -159 6 -159 -7 0 -35 71 -32 81 0 4 -8 15 -18 24 -27 24
-25 38 3 25 21 -11 21 -10 3 4 -11 9 -25 16 -30 16 -6 0 -19 14 -29 31 -15 28
-15 31 -1 25 9 -3 28 -8 42 -11 26 -5 26 -5 -3 9 -16 9 -38 15 -47 16 -17 0
-58 37 -58 52 0 4 6 6 13 4 6 -3 26 -7 42 -10 28 -6 29 -5 11 9 -11 8 -36 15
-57 15 -22 0 -46 8 -60 20 l-24 19 49 1 c68 0 51 11 -24 16 -68 4 -90 12 -69
25 23 14 82 10 124 -10z m-1953 -21 c18 -11 42 -20 54 -20 11 0 24 -3 28 -7 4
-5 19 -8 33 -8 17 0 28 -7 34 -22 6 -16 5 -21 -5 -17 -15 6 -30 -27 -46 -96
-12 -58 -13 -100 0 -100 6 0 10 13 10 30 0 38 20 133 31 144 13 14 22 -40 17
-102 -3 -31 -3 -47 -1 -34 4 21 23 32 23 13 0 -5 14 -14 31 -21 35 -15 32 -20
-36 -53 -88 -44 -92 -44 -100 4 -8 47 -22 41 -27 -11 l-3 -35 -114 -12 c-94
-9 -124 -17 -173 -42 l-59 -31 3 39 c1 22 5 38 9 36 3 -3 11 28 18 67 22 133
81 227 173 272 62 31 59 31 100 6z m1880 -44 c35 -25 80 -67 102 -94 38 -49
102 -152 93 -152 -2 0 -28 31 -57 69 -49 65 -148 151 -173 151 -7 0 -7 -4 1
-12 7 -7 13 -32 14 -57 l1 -46 4 43 c8 85 52 29 54 -68 2 -59 3 -61 9 -25 9
50 12 45 13 -27 1 -31 5 -59 9 -63 8 -9 3 111 -6 145 l-8 25 21 -24 c17 -18
21 -38 22 -90 1 -44 3 -58 8 -41 l7 25 8 -25 c4 -14 10 -20 12 -13 3 7 0 29
-6 49 -15 44 -6 57 12 18 7 -16 20 -36 28 -44 9 -8 28 -28 42 -45 l27 -30 -99
5 c-54 3 -100 7 -102 10 -2 3 -17 34 -33 70 -17 35 -44 82 -60 105 -46 60 -48
65 -34 81 10 12 14 12 20 2 6 -9 9 -4 9 15 0 15 -4 27 -10 27 -5 0 -10 -5 -10
-12 0 -6 -2 -9 -5 -7 -5 6 13 79 20 79 2 0 32 -20 67 -44z m-2148 -131 c-22
-63 -24 -65 -19 -26 5 37 34 106 41 98 1 -1 -9 -33 -22 -72z m2120 -110 c56
-116 69 -223 41 -340 -8 -33 -14 -74 -15 -92 0 -51 -17 -47 -25 5 -4 26 -13
64 -20 85 -12 35 -4 55 9 21 4 -9 9 -14 13 -10 4 3 -5 19 -18 34 -63 69 -67
100 -9 67 14 -8 29 -14 34 -15 14 0 -54 49 -76 56 -10 3 -27 23 -38 44 -18 36
-19 39 -3 33 22 -7 104 -43 118 -51 6 -3 4 2 -3 11 -18 21 -92 57 -119 57 -13
0 -29 13 -42 36 -12 19 -21 36 -21 38 0 3 109 -10 145 -19 23 -5 26 -4 15 4
-22 16 -86 32 -131 33 -26 0 -39 5 -39 14 0 22 40 37 89 31 41 -5 44 -4 26 9
-10 8 -29 14 -42 14 -28 0 -29 4 -1 42 l21 31 29 -34 c16 -19 44 -65 62 -104z
m-1577 1 c-3 -9 3 -17 16 -21 18 -6 12 -9 -26 -15 -52 -9 -73 -20 -41 -20 14
-1 11 -5 -11 -16 -16 -8 -22 -12 -12 -9 10 3 27 5 38 5 10 0 18 6 17 13 -3 11
9 12 57 4 12 -2 21 -13 23 -27 2 -14 0 -20 -7 -15 -6 3 -8 12 -4 18 4 7 0 6
-10 -2 -9 -7 -15 -17 -12 -21 2 -4 -12 -22 -31 -41 -19 -18 -53 -62 -76 -96
-23 -35 -43 -61 -46 -59 -10 11 67 132 127 201 20 22 26 32 15 23 -11 -10 -36
-18 -55 -18 -19 -1 -45 -7 -59 -16 -19 -11 -20 -14 -5 -10 64 16 75 17 75 10
0 -13 -32 -44 -46 -44 -19 0 -67 -20 -62 -26 3 -2 17 0 32 5 44 18 26 -24 -21
-46 -19 -9 -21 -11 -5 -7 28 7 28 -6 0 -36 -12 -13 -23 -32 -24 -44 -1 -12 -5
-39 -8 -61 l-7 -40 24 44 c15 28 26 39 29 30 3 -8 8 3 12 23 8 44 26 60 26 24
0 -14 5 -28 10 -31 6 -4 10 10 10 35 0 23 8 55 17 73 l17 32 7 -58 c9 -80 19
-83 19 -6 0 49 5 72 22 99 l22 35 8 -64 c10 -90 16 -97 17 -18 1 66 1 67 29
67 24 0 27 -4 29 -38 1 -21 7 -49 12 -63 8 -19 10 -11 10 44 1 37 5 67 10 67
5 0 16 3 25 6 13 5 16 -1 17 -27 1 -19 5 -45 9 -59 6 -19 8 -9 9 38 1 48 4 62
16 62 9 0 16 -10 16 -27 2 -24 2 -25 6 -5 5 25 7 26 34 12 19 -11 19 -11 0
-48 -24 -47 -84 -104 -136 -130 -36 -18 -42 -18 -62 -5 -22 15 -23 14 -23 -8
0 -21 -9 -27 -83 -49 -45 -13 -102 -35 -126 -48 -35 -18 -46 -20 -52 -10 -12
17 -11 41 0 34 5 -4 9 34 9 87 -1 107 20 192 54 224 68 64 137 102 125 69z
m-147 -65 c0 -12 -49 -28 -74 -24 -31 6 -34 21 -5 31 23 9 79 4 79 -7z m1569
-33 c43 -57 117 -205 126 -253 4 -19 -7 -5 -30 40 -45 85 -117 189 -147 210
-13 8 -17 15 -9 15 8 0 30 -17 49 -37 19 -21 31 -29 25 -18 -6 11 -21 29 -33
40 -28 25 -44 55 -31 55 6 0 28 -24 50 -52z m-230 -38 c-18 -22 -30 -43 -27
-46 3 -3 16 9 28 26 26 37 68 60 110 60 16 0 30 -2 30 -5 0 -2 -17 -27 -37
-54 -49 -65 -76 -111 -65 -111 5 0 23 21 40 48 17 26 46 62 65 81 l35 33 17
-32 c15 -29 15 -34 2 -41 -18 -11 -72 -95 -82 -129 -4 -14 9 2 29 34 20 32 46
67 58 78 21 18 22 18 38 -7 16 -24 16 -28 -7 -73 -12 -26 -25 -63 -28 -82 -5
-28 -1 -23 20 25 33 76 39 81 58 51 13 -19 14 -31 7 -57 -6 -19 -10 -43 -9
-54 1 -11 6 -3 11 18 6 20 13 37 18 37 8 0 70 -142 70 -161 0 -8 -7 -6 -18 5
-11 9 -59 32 -108 52 -126 51 -160 70 -210 116 -44 40 -45 42 -38 87 7 46 7
46 -14 28 -11 -11 -25 -16 -31 -13 -14 9 -23 62 -16 96 6 27 10 30 46 30 l40
0 -32 -40z m497 30 c9 0 12 -5 8 -11 -3 -6 -15 -9 -25 -6 -15 4 -19 -1 -20
-21 -1 -27 -1 -27 -8 3 -9 36 -4 48 16 41 8 -3 21 -6 29 -6z m-1311 -77 c29
-36 21 -44 -15 -15 -23 18 -23 18 -58 -20 -19 -21 -37 -36 -40 -33 -3 3 4 15
16 28 12 13 22 29 22 35 0 22 24 51 36 44 6 -4 24 -22 39 -39z m-141 -98 c-28
-23 -75 -47 -80 -42 -3 2 9 10 25 17 16 6 37 20 47 31 9 11 20 17 22 14 3 -3
-3 -12 -14 -20z'/>
<path d='M1275 2361 c-57 -4 -73 -8 -55 -13 35 -11 87 -8 145 7 56 14 42 15
-90 6z'/>
<path d='M1715 2276 c-16 -6 -25 -15 -20 -18 6 -3 26 2 45 13 39 20 21 25 -25
5z'/>
<path d='M1205 2119 c-22 -16 -42 -35 -44 -42 -4 -11 74 47 84 64 9 14 3 11
-40 -22z'/>
<path d='M1380 2100 c-14 -10 -25 -22 -25 -27 -1 -4 -11 -23 -22 -42 -25 -40
-38 -142 -24 -186 l9 -30 2 35 2 35 9 -35 c5 -19 6 -46 4 -60 -4 -18 -3 -21 4
-11 5 8 7 45 4 82 -7 86 2 130 34 171 22 29 21 29 -11 -4 -39 -41 -49 -37 -15
6 11 14 17 30 14 36 -3 5 1 10 9 10 8 0 20 9 26 20 13 25 11 25 -20 0z'/>
<path d='M811 2037 c-18 -47 -24 -144 -11 -195 13 -57 96 -205 110 -197 5 3
16 -5 24 -17 22 -32 20 -9 -5 48 -12 26 -27 79 -34 118 -7 39 -14 63 -15 54
-2 -10 -4 -22 -5 -28 -1 -5 -3 -25 -4 -42 l-1 -33 -21 33 c-12 18 -22 43 -23
56 0 14 -5 24 -11 23 -17 -3 -17 75 -1 137 16 61 14 88 -3 43z'/>
<path d='M1945 2045 c11 -9 19 -18 18 -20 -2 -3 -1 -5 2 -5 2 0 23 -19 45 -43
43 -45 52 -41 20 10 -10 18 -39 42 -62 53 -27 13 -36 15 -23 5z'/>
<path d='M886 1955 c-14 -13 -26 -30 -26 -37 0 -7 9 -2 19 11 10 14 27 31 37
38 10 7 13 13 7 13 -5 0 -22 -11 -37 -25z'/>
<path d='M2103 1892 c2 -23 8 -46 12 -50 5 -4 5 2 2 13 -7 20 -7 20 8 0 10
-12 12 -21 5 -23 -5 -2 -10 -8 -10 -14 0 -6 6 -6 15 2 12 10 15 7 20 -17 3
-15 12 -49 20 -74 18 -57 19 -69 1 -46 -13 16 -14 15 -19 -10 -7 -36 -5 -37
24 -14 22 18 23 22 11 53 -6 19 -12 45 -12 59 0 13 -8 36 -17 49 -10 14 -28
45 -41 70 l-22 45 3 -43z'/>
<path d='M725 1772 c4 -12 18 -42 31 -65 14 -23 22 -32 19 -19 -4 12 -18 42
-31 65 -14 23 -22 32 -19 19z'/>
<path d='M1346 1765 c-5 -14 32 -100 40 -92 1 1 -6 26 -15 55 -13 37 -20 48
-25 37z'/>
<path d='M1492 1750 c-24 -23 -32 -51 -9 -32 7 7 29 19 48 27 31 14 31 15 6
10 -19 -4 -26 -2 -22 5 10 16 1 12 -23 -10z'/>
<path d='M2355 1745 c9 -16 31 -41 48 -55 l32 -25 -22 30 c-11 17 -33 41 -49
55 l-27 25 18 -30z'/>
<path d='M1656 1741 c-4 -5 -22 -7 -41 -4 -35 6 -119 -19 -130 -37 -3 -5 11
-2 32 6 24 10 55 14 85 12 33 -4 52 -1 59 9 7 7 9 16 6 19 -3 3 -8 1 -11 -5z'/>
<path d='M999 1634 c-15 -18 -21 -104 -7 -104 5 0 6 -5 3 -11 -4 -6 -14 -8
-22 -5 -22 9 14 -48 56 -87 l35 -32 -32 39 c-17 22 -28 44 -25 49 3 6 1 7 -5
3 -7 -4 -12 -1 -12 7 0 20 11 28 24 18 6 -5 14 -10 18 -10 22 -4 38 -15 38
-26 0 -7 25 -34 55 -60 30 -25 55 -42 55 -36 0 5 -16 23 -35 38 -42 33 -46 49
-7 29 30 -16 74 -61 117 -121 16 -22 30 -42 32 -45 2 -2 50 -5 106 -5 l102 0
60 -44 c78 -57 86 -65 58 -58 -13 3 -25 2 -28 -3 -3 -4 53 -7 124 -6 76 0 127
5 123 10 -3 5 2 7 11 3 9 -3 19 -2 21 2 6 9 -54 19 -180 29 -78 7 -83 9 -126
48 -52 48 -103 62 -168 44 -58 -16 -82 -7 -107 37 -12 21 -34 50 -50 65 -37
35 -193 128 -215 128 -21 0 -24 31 -7 79 13 37 8 49 -12 25z'/>
<path d='M1035 1620 c-27 -51 -20 -62 58 -98 101 -46 205 -124 223 -169 8 -19
17 -33 20 -30 10 10 -25 76 -54 102 -17 15 -52 38 -78 52 -59 31 -92 53 -79
53 6 0 19 -7 29 -15 11 -8 23 -15 27 -15 14 0 2 32 -16 42 -13 8 -16 7 -11 -1
9 -14 5 -14 -35 3 -50 21 -71 48 -63 80 8 35 -2 33 -21 -4z'/>
<path d='M721 1602 c-1 -23 -8 -58 -16 -78 -8 -19 -10 -32 -4 -28 18 11 -1
-36 -39 -96 l-34 -55 31 29 c17 17 31 37 31 45 0 11 3 12 11 4 8 -8 8 -26 -1
-66 -14 -62 -10 -94 8 -61 6 12 16 60 21 106 15 130 25 144 126 173 l50 14
-45 -4 c-79 -9 -95 -14 -118 -42 l-24 -28 7 25 c4 14 9 32 11 41 2 9 0 27 -5
40 -9 21 -10 19 -10 -19z'/>
<path d='M855 1550 c-63 -25 -72 -37 -80 -113 -3 -34 -8 -75 -11 -92 -4 -24
-3 -27 6 -13 5 9 12 38 15 65 3 33 11 53 26 66 12 9 16 17 10 17 -22 0 3 32
45 56 24 14 44 28 44 30 0 5 3 6 -55 -16z'/>
<path d='M930 1522 c0 -22 37 -85 73 -124 l35 -38 -27 0 c-14 0 -54 9 -89 19
-34 11 -60 15 -57 10 3 -4 24 -13 47 -20 29 -7 37 -13 28 -19 -8 -5 2 -6 26
-3 44 6 96 -12 157 -54 42 -29 51 -55 10 -28 -16 10 -39 25 -53 34 -15 10 -21
11 -16 3 4 -6 21 -19 38 -28 16 -8 27 -18 24 -21 -3 -3 -21 4 -41 16 -20 11
-33 16 -30 11 10 -16 85 -51 95 -45 6 3 10 1 10 -4 0 -6 -8 -11 -17 -12 -34
-2 73 -30 202 -54 181 -33 205 -36 205 -26 0 7 -96 30 -245 58 -44 8 -95 36
-136 74 -20 19 -74 67 -119 108 -50 46 -90 91 -101 115 -10 23 -19 35 -19 28z'/>
<path d='M1655 1485 c72 -30 78 -30 96 -7 13 15 12 16 -3 3 -11 -8 -25 -10
-35 -6 -16 7 -15 9 7 15 23 7 22 8 -10 10 -19 0 -53 3 -75 5 -39 4 -38 3 20
-20z'/>
<path d='M1045 1446 c14 -19 34 -37 43 -41 9 -3 -1 12 -23 34 -48 50 -54 52
-20 7z'/>
<path d='M2429 1389 c-6 -28 10 -59 32 -59 9 0 8 4 -3 13 -9 6 -18 26 -20 42
l-3 30 -6 -26z'/>
<path d='M2326 1340 c9 -30 13 -69 10 -89 l-5 -36 14 35 c21 55 18 93 -10 120
l-25 23 16 -53z'/>
<path d='M1494 1328 c1 -7 13 -14 25 -14 12 -1 32 -10 44 -21 45 -41 80 -56
150 -64 40 -4 90 -10 112 -13 l40 -6 -35 11 c-30 10 -32 12 -15 19 15 6 7 10
-35 18 -30 6 -75 13 -100 16 -45 5 -45 5 -15 -9 26 -12 27 -14 8 -15 -26 0
-73 20 -73 31 0 12 -79 51 -89 44 -5 -3 -12 0 -14 5 -3 6 -4 5 -3 -2z'/>
<path d='M649 1293 c-8 -9 -27 -22 -44 -29 -24 -10 -26 -13 -9 -14 21 0 41 13
63 43 17 22 8 23 -10 0z'/>
<path d='M1990 1269 c-42 -18 -43 -19 -10 -13 37 7 95 34 70 33 -8 -1 -35 -10
-60 -20z'/>
<path d='M703 1251 c1 -12 7 -17 18 -14 10 3 26 0 36 -6 14 -8 15 -11 3 -11
-8 -1 5 -8 30 -15 24 -8 45 -13 47 -11 1 1 -19 19 -46 39 -53 41 -91 49 -88
18z'/>
<path d='M1465 1190 c39 -11 79 -19 90 -19 30 1 -52 25 -110 32 -46 6 -45 5
20 -13z'/>
<path d='M2070 1189 c0 -5 -4 -7 -10 -4 -5 3 -19 -1 -31 -9 -12 -8 -27 -12
-35 -9 -7 3 -29 -5 -49 -17 -46 -28 -46 -38 1 -11 45 27 63 27 33 0 l-24 -21
30 18 c16 10 59 28 95 41 62 21 63 23 28 23 -21 0 -38 -5 -38 -11z'/>
<path d='M2301 1150 l1 -45 10 34 c6 23 6 37 -1 44 -8 8 -11 -2 -10 -33z'/>
<path d='M1884 1139 c-10 -12 -40 -32 -66 -45 -63 -32 -61 -38 2 -12 28 12 60
34 71 49 24 34 20 38 -7 8z'/>
<path d='M1371 1126 c37 -14 148 -32 139 -23 -6 6 -149 37 -165 36 -5 0 6 -6
26 -13z'/>
<path d='M966 1094 c-3 -8 -2 -12 4 -9 6 3 10 2 10 -4 0 -5 14 -13 31 -16 23
-5 28 -9 18 -16 -11 -7 -9 -9 8 -9 12 0 30 -3 40 -6 14 -4 13 -1 -6 15 -13 12
-29 21 -36 21 -7 0 -24 9 -38 20 -22 17 -26 18 -31 4z'/>
<path d='M1420 1080 c33 -11 98 -12 103 -2 3 4 -25 8 -62 8 -44 1 -58 -1 -41
-6z'/>
<path d='M1630 1090 c-1 -3 -4 -22 -5 -43 -4 -46 -10 -54 -29 -38 -11 9 -16 9
-22 0 -4 -7 -3 -9 4 -5 18 11 22 -9 6 -40 l-14 -29 26 29 26 29 -4 -29 c-2
-19 -14 -36 -38 -52 -19 -12 -42 -28 -50 -35 -8 -7 -19 -12 -25 -12 -24 -1
-115 -30 -115 -37 0 -11 6 -10 66 6 28 7 68 25 89 39 21 15 43 23 48 20 6 -3
7 -1 3 5 -3 6 3 14 14 17 30 10 39 41 30 115 -4 36 -8 63 -10 60z'/>
<path d='M786 1030 c9 -61 17 -74 68 -104 45 -26 86 -79 86 -110 0 -16 8 -17
68 -11 82 9 92 15 26 15 -27 0 -44 4 -37 8 8 5 1 14 -22 26 -19 11 -35 23 -35
27 0 4 -26 22 -57 40 -57 33 -85 58 -77 70 2 4 -3 24 -11 45 l-15 39 6 -45z'/>
<path d='M1967 858 c2 -5 -4 -8 -13 -8 -10 0 -15 -2 -12 -5 3 -3 29 -2 59 3
l54 8 -47 5 c-25 2 -44 1 -41 -3z'/>
<path d='M1182 824 c-24 -11 -38 -12 -55 -4 -21 11 -21 11 -2 -5 11 -8 26 -13
35 -9 8 3 51 9 95 12 61 5 73 8 50 13 -48 11 -87 8 -123 -7z'/>
<path d='M1390 744 l-25 -15 25 7 c14 4 50 10 80 14 l55 7 -55 1 c-33 1 -65
-5 -80 -14z'/>
<path d='M1901 716 c-6 -8 -25 -19 -42 -26 -16 -7 -28 -15 -25 -17 6 -6 83 34
91 47 9 15 -11 12 -24 -4z'/>
<path d='M1529 580 l-24 -21 45 6 c63 9 81 15 75 26 -11 17 -72 10 -96 -11z'/>
<path d='M1225 1695 c35 -49 117 -125 128 -118 5 3 -7 16 -25 29 -18 13 -55
47 -82 76 -42 46 -45 47 -21 13z'/>
<path d='M490 1133 c14 -2 45 -9 69 -15 38 -10 42 -13 27 -24 -12 -8 -40 -11
-90 -7 -49 4 -75 2 -80 -6 -5 -8 11 -11 53 -11 34 0 61 -4 61 -10 0 -5 -6 -10
-14 -10 -7 0 -19 -7 -26 -15 -8 -10 -33 -16 -74 -17 -56 -1 -57 -2 -13 -5 26
-2 47 -8 47 -12 0 -9 -32 -25 -80 -40 l-35 -10 33 5 c45 8 40 -11 -8 -30 -44
-17 -52 -27 -17 -19 21 4 21 4 4 -10 -17 -14 -62 -87 -53 -87 2 0 29 31 61 70
67 79 154 153 238 200 53 30 76 49 42 37 -8 -4 -27 0 -42 8 -15 8 -50 14 -78
14 -27 -1 -39 -3 -25 -6z'/>
<path d='M650 1090 c-13 -11 -27 -20 -33 -20 -36 0 -328 -261 -327 -293 0 -7
13 2 27 18 15 17 30 29 33 28 4 -1 13 9 20 22 16 31 30 33 22 3 -3 -14 -2 -19
6 -14 7 4 12 14 12 22 0 19 28 74 38 74 4 0 6 -21 5 -47 l-2 -48 10 50 c11 58
26 92 45 99 9 4 11 -8 7 -47 -2 -29 0 -63 5 -77 9 -21 11 -15 11 37 1 34 5 73
10 86 9 24 59 77 72 77 4 0 -1 -23 -12 -50 -10 -28 -19 -69 -18 -93 1 -38 2
-35 18 33 20 88 31 111 68 139 16 11 23 21 17 21 -6 0 -21 -9 -34 -20z'/>
<path d='M930 694 c0 -27 5 -56 10 -64 7 -10 8 4 4 45 -7 75 -14 84 -14 19z'/>
<path d='M2183 710 c-17 -10 -37 -29 -44 -42 -11 -20 -10 -21 3 -11 8 7 19 9
23 5 5 -4 5 -2 2 5 -4 6 7 22 25 37 39 31 35 33 -9 6z'/>
</g>
</svg>
";

    func _getWebpage() : Text {
        var webpage = "<style>" #
        "body { text-align: center; font-family: Arial, sans-serif; background-color: #f0f8ff; color: #333; }" #
        "h1 { font-size: 3em; margin-bottom: 10px; }" #
        "hr { margin-top: 20px; margin-bottom: 20px; }" #
        "em { font-style: italic; display: block; margin-bottom: 20px; }" #
        "ul { list-style-type: none; padding: 0; }" #
        "li { margin: 10px 0; }" #
        "li:before { content: '👉 '; }" #
        "svg { max-width: 150px; height: auto; display: block; margin: 20px auto; }" #
        "h2 { text-decoration: underline; }" #
        "</style>";

        webpage := webpage # "<div><h1>" # name # "</h1></div>";
        webpage := webpage # "<em>" # manifesto # "</em>";
        webpage := webpage # "<div>" # logo # "</div>";
        webpage := webpage # "<hr>";
        webpage := webpage # "<h2>Our goals:</h2>";
        webpage := webpage # "<ul>";
        for (goal in goals.vals()) {
            webpage := webpage # "<li>" # goal # "</li>";
        };
        webpage := webpage # "</ul>";
        return webpage;
    };

    public query func getStats() : async DAOStats {
        return ({
            name;
            manifesto;
            goals = Buffer.toArray(goals);
            members = Iter.toArray(Iter.map<Member, Text>(members.vals(), func(member : Member) { member.name }));
            logo;
            numberOfMembers = members.size();
        });
    };

    public query func http_request(request : HttpRequest) : async HttpResponse {
        return ({
            headers = [("Content-Type", "text/html; charset=UTF-8")];
            status_code = 200 : Nat16;
            body = Text.encodeUtf8(_getWebpage());
            streaming_strategy = null;
        });
    };


};